<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.ulyssesss.com/"/>
  <updated>2021-03-17T05:28:27.703Z</updated>
  <id>https://blog.ulyssesss.com/</id>
  
  <author>
    <name>大雪碧</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象概述</title>
    <link href="https://blog.ulyssesss.com/2020/03/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0/"/>
    <id>https://blog.ulyssesss.com/2020/03/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0/</id>
    <published>2020-03-25T14:02:59.000Z</published>
    <updated>2021-03-17T05:28:27.703Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="什么面向对象编程"><a href="#什么面向对象编程" class="headerlink" title="什么面向对象编程"></a>什么面向对象编程</h3><p>面向对象编程（OOP，Object Oriented Programming），是一种编程范式或编程风格。以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。</p><p>面向对象编程语言（OOPL，Object Oriented Programming Language），是支持类或对象，并有现成的语法机制，能方便地实现面向对象编程四大特性（封装、抽象、继承、多态）的编程语言。</p><p>一般通过面向对象编程语言来进行面向对象编程，但不用面向对象编程语言，同样可以进行面向对象编程。反过来，使用面向对象编程语言，写出来的代码不一定是面向对象编程风格的，也有可能是面向过程编程风格的。</p><h3 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h3><p>封装、抽象、继承、多态是面向对象的四大特性，也有另外一种说法，即只包含封装、继承和多态的三大特性，不包含抽象。</p><h4 id="封装（Encapsulation）"><a href="#封装（Encapsulation）" class="headerlink" title="封装（Encapsulation）"></a>封装（Encapsulation）</h4><p>封装也叫作信息隐藏或者数据访问保护。类通过暴露有限的访问接口，授权外部仅能通过类提供的方式（或者叫函数）来访问内部信息或者数据。</p><p>封装这个特性，需要编程语言本身提供一定的语法机制（访问权限控制）来支持，如 Java 中 private、public 等关键字。</p><p>如果没有封装，代码会过于灵活和不可控，属性能以各种方式被修改，散落在各处，影响可读性和可维护性。另外，通过有限的方法暴露必要的操作，也能提高类的易用性，给调用者减负，无需了解细节。</p><h4 id="抽象（Abstraction）"><a href="#抽象（Abstraction）" class="headerlink" title="抽象（Abstraction）"></a>抽象（Abstraction）</h4><p>抽象即隐藏方法具体实现，让调用者只需关心方法提供的功能，而不需了解功能呢的实现细节。</p><p>在面向对象编程中，通常借助编程语言提供的接口类（如 Java 中的 interface 关键字）或者抽象类（如 Java 中的 abstract 关键字）这两种语法机制，来实现抽象这一特性。</p><p>实际上，抽象这个特性非常容易实现，并非只能依靠接口类或者抽象类这些特殊语法机制来支持。具体实现逻辑被函数包裹，本身就是一种抽象。</p><p>抽象是一个非常通用的设计思想，不仅可以用在 OOP 中，也可以用来指导架构设计等。同时抽象又不需要编程语言提供特殊的语法机制来支持，没有很强的特异性，所以有时不被看作 OOP 的特性之一。</p><p>抽象一方面能够提高代码的可扩展性、维护性，修改实现不需要改变定义，减少代码的改动范围；另一方面，也是处理复杂系统的有效手段，能有效地过滤掉不必要关注的信息。</p><p>在定义（命名）类的方法时，也要有抽象思维，不要在方法定义中暴露太多的实现细节。</p><h4 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h4><p>继承用来表示类之间的 is-a 关系，从关系上可以分为单继承和多继承两种模式。单继承表示一个子类只继承一个父类，多继承表示一个子类可以继承多个父类（有菱形继承的副作用）。</p><p>继承这个特性，需要编程语言提供特殊的语法机制来支持，如 Java 中的 extends 关键字。</p><p>继承最大的一个好处是代码复用（组合也可以解决复用问题），将不同类的相同属性和方法，抽取到父类中，让子类继承父类。另外通过继承表示 is-a 关系，非常符合人类的认知。</p><p>过度使用继承，继承层次过深过复杂，会导致代码可读性、可维护性变差。很多人觉得继承是一种反模式。</p><h4 id="多态（Polymorphism）"><a href="#多态（Polymorphism）" class="headerlink" title="多态（Polymorphism）"></a>多态（Polymorphism）</h4><p>多态，即在实际的代码运行过程中，子类可以替换父类，调用子类的方法实现。</p><p>多态需要编程语言提供特殊的语法机制来实现。编程语言需要支持父类对象可以引用子类对象，支持继承，支持子类可以重写（override）父类中的方法。</p><p>除利用继承加方法重写这种实现方式外，还有其他两种比较常见的的实现方式，一是利用接口类语法，二是利用 duck-typing 语法。</p><p>多态特性能提高代码的可扩展性和复用性。</p><h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><p>面向对象编程中，抽象类和接口是两个经常被用到的语法概念，是面向对象四大特性，以及很多设计模式、设计思想、设计原则编程实现的基础。</p><h4 id="语法特性"><a href="#语法特性" class="headerlink" title="语法特性"></a>语法特性</h4><p>接口不能包含属性，只能声明方法，方法不包含代码实现。类实现接口的时候，必须实现接口中声明的所有方法。</p><p>抽象类不允许被实例化，只能被继承，可以包含属性和方法。方法既可以包含代码实现，也可以不包含代码实现。不包含代码实现的方法叫作抽象方法。子类继承抽象类，必须实现抽象类中的所有抽象方法。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>接口仅仅是对方法的抽象，是一种 has-a 关系，表示具有某一组行为特性，解决<strong>解耦</strong>问题，隔离接口和具体的实现，提高代码的扩展性。</p><p>抽象类是对成员变量和方法的抽象，是一种 is-a 关系，解决代码<strong>复用</strong>问题。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>如果要表示一种 has-a 关系，并且是为了解决抽象而非代码复用问题，就使用接口。</p><p>如果要表示一种 is-a 的关系，并且是为了解决代码复用问题，就使用抽象类。</p><h3 id="基于接口而非实现编程"><a href="#基于接口而非实现编程" class="headerlink" title="基于接口而非实现编程"></a>基于接口而非实现编程</h3><p>基于接口而非实现编程，是一条比较抽象、泛化的设计思想，能非常有效地提高代码质量。另一个表述方式是基于抽象而非实现编程。</p><p>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性，越能应对未来的需求变化。</p><p>定义接口时，命名要足够通用，不能包含跟具体实现相关的字眼，仅与特定实现有关的方法也不要定义在接口中。</p><p>越不稳定越需要接口。而如果在实际业务场景中，某个功能只有一种实现方式，未来也不可能被其他实现方式替换，那就没有必要为其设计接口，可以直接使用实现类。</p><h3 id="继承还是组合"><a href="#继承还是组合" class="headerlink" title="继承还是组合"></a>继承还是组合</h3><p>在面向对象编程中，通常说组合优于继承。</p><p>继承主要是解决复用问题，而最大的问题是，继承层次过深、继承关系过于复杂会影响到代码的可读性和可维护性。</p><p>通过组合、接口、委托三个技术手段，完全可以替换掉继承，不用或者少用继承关系，特别是一些复杂的继承关系。</p><p>继承并非一无是处，继承改写成组合要做更细粒度的类的拆分，增加代码的复杂程度和维护成本。</p><p>如果类之间的继承结构稳定、层次浅、关系简单，就可以使用继承。还有一些特殊的场景要求必须使用继承，如不能改变函数入参类型，还想使用多态。反之就尽量使用组合来替代继承。</p><h3 id="面向对象与面向过程"><a href="#面向对象与面向过程" class="headerlink" title="面向对象与面向过程"></a>面向对象与面向过程</h3><p>除面向对象外，还有面向过程编程和函数式编程两种编程范式。面向过程随着面向对象的出现，已经慢慢退出舞台，而函数式编程目前还没有被广泛接受。</p><h4 id="什么是面向过程编程"><a href="#什么是面向过程编程" class="headerlink" title="什么是面向过程编程"></a>什么是面向过程编程</h4><p>面向过程编程是一种编程范式或编程风格，以过程（方法、函数、操作）作为组织代码的基本单元，主要特点为数据（成员变量、属性）与方法相分离，通过拼接一组顺序执行的方法来操作数据完成一项功能。</p><p>面向过程编程语言最大的特点是不支持类和对象两个语法概念，不支持丰富的面向对象编程特性（比如继承、多态、封装），仅支持面向过程编程。</p><h4 id="面向对象编程的优势"><a href="#面向对象编程的优势" class="headerlink" title="面向对象编程的优势"></a>面向对象编程的优势</h4><ol><li>对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。OOP 更能应对这种复杂类型的程序。</li><li>面向对象具有封装、抽象、继承、多态四大特性，利用这些特性可以写出更加易复用、易扩展、易维护的代码。</li><li>OOP 语言更加人性化、更加高级、更加智能。</li></ol><h4 id="看似而不是面向对象的代码"><a href="#看似而不是面向对象的代码" class="headerlink" title="看似而不是面向对象的代码"></a>看似而不是面向对象的代码</h4><ol><li>滥用 getter、setter 方法，破坏封装。</li><li>滥用全局变量和全局方法，方法与数据分离。Constants 类和 Utils 类最常用到。</li><li>定义数据和方法分离的类，如基于 MVC 三层结构做 Web 方面的后端开发（贫血模型）。</li></ol><h4 id="为什么容易写出面向过程的代码"><a href="#为什么容易写出面向过程的代码" class="headerlink" title="为什么容易写出面向过程的代码"></a>为什么容易写出面向过程的代码</h4><ol><li>符合人的流程化思维方式。</li><li>相比面向对象要更加容易。</li></ol><h4 id="是否要杜绝面向过程"><a href="#是否要杜绝面向过程" class="headerlink" title="是否要杜绝面向过程"></a>是否要杜绝面向过程</h4><p>面向过程编程是面向对象编程的基础，面向对象编程离不开基础的面向过程编程。</p><p>不管使用哪种风格来写代码，最终目的是写出易维护、易读、易复用、易扩展的高质量代码。只要能避免面向过程编程风格的一些弊端，控制好副作用，就不用避讳在面向对象编程中写面向过程风格的代码。</p><h3 id="业务开发模式"><a href="#业务开发模式" class="headerlink" title="业务开发模式"></a>业务开发模式</h3><p>很多业务系统基于 MVC 三层架构来开发，其中 M 表示 Model，V 表示 View，C 表示 Controller，项目分为展示层、逻辑层和数据层。</p><p>Web 或 App 项目很多都是前后端分离，其中后端负责提供接口给前端调用，又分为 Repository 层、Service 层和 Controller 层。Repository 层负责数据访问，Service 层负责业务逻辑，Controller 层负责暴露接口。</p><h4 id="基于贫血模型的传统开发模式"><a href="#基于贫血模型的传统开发模式" class="headerlink" title="基于贫血模型的传统开发模式"></a>基于贫血模型的传统开发模式</h4><p>传统开发模式中，XxxEntity 和 XxxRepository 组成数据访问层，XxxBo 和 XxxService 组成业务逻辑层，XxxVo 和 XxxController 组成接口层。</p><p>Bo 是一个纯粹的数据结构，只包含数据，不包含任何业务逻辑。业务逻辑集中在 Service 中。</p><p>这种只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model）。</p><p>贫血模型将数据与操作分离，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。</p><h4 id="基于充血模型的-DDD-开发模式"><a href="#基于充血模型的-DDD-开发模式" class="headerlink" title="基于充血模型的 DDD 开发模式"></a>基于充血模型的 DDD 开发模式</h4><p>充血模型（Rich Domain Model）与贫血模型相反，数据和对应的业务逻辑被封装到同一个类中，满足面向对象的封装特性，是典型的面向对象编程风格。</p><p>领域驱动设计，即 DDD，主要是用来指导如何解耦业务系统，划分业务模块，定义业务领域模型及其交互。DDD 在 2004 年被提出，随微服务兴起而被熟知。</p><p>基于充血模型的 DDD 开发模式，跟基于贫血模型的传统开发模式之间的差别，主要在 Service 层。</p><p>DDD 开发模式中，Service 层由 Service 类和 Domain 类组成。Domain 就相当于贫血模型中的 Bo，区别在于既包含数据，也包含业务逻辑。而 Service 类变得非常单薄，仅负责与 Repository 交互、业务聚合和一些非功能性工作（如幂等、事务、日志等）。</p><h4 id="传统开发模式受欢迎的原因"><a href="#传统开发模式受欢迎的原因" class="headerlink" title="传统开发模式受欢迎的原因"></a>传统开发模式受欢迎的原因</h4><p>第一，大多系统业务比较简单，不需要精心设计充血模型，贫血模型足以应付。即便使用充血模型，模型本身包含的业务逻辑也不多，领域模型也比较单薄，跟贫血模型差别不大。</p><p>第二，充血模型的设计要比贫血模型更有难度。</p><p>第三，思维固化，有学习和转型的成本。</p><h4 id="何时该使用-DDD-开发模式"><a href="#何时该使用-DDD-开发模式" class="headerlink" title="何时该使用 DDD 开发模式"></a>何时该使用 DDD 开发模式</h4><p>基于充血模型的 DDD 开发模式，更适合业务复杂的系统开发。</p><p>除代码层面的区别外，两种开发模式有不同的开发流程。DDD 开发模式下，需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。需求的开发基于定义好的领域模型，在应对复杂业务系统开发时更有优势。</p><h3 id="面向对象分析和设计"><a href="#面向对象分析和设计" class="headerlink" title="面向对象分析和设计"></a>面向对象分析和设计</h3><p>跟 OOP 经常联系在一起的还有面向对象分析（OOA）和面向对象设计（OOD）。分析、设计、编程（实现），正是面向对象软件开发要经历的三个阶段。</p><h4 id="面向对象分析"><a href="#面向对象分析" class="headerlink" title="面向对象分析"></a>面向对象分析</h4><p>业务需求一般比较明确，而针对框架、类库、组件等非业务系统的开发，其中一个难点是需求一般比较抽象和模糊，需要自己去挖掘、权衡、假设，把抽象的问题具象化，最终产生清晰的、可落地的需求定义。</p><p>需求分析的过程实际上是一个不断迭代优化的过程。不要试图一次给出一个完美的解决方案，而是先给出一个基础的方案，然后再慢慢优化，这样的思考过程更容易摆脱无从下手的窘境。</p><h4 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h4><p>OOA 的产出是详细具体的需求描述，而 OOD 的产出是类，主要包含以下几个部分。</p><p>一、划分职责、识别出有哪些类。</p><p>可以根据需求描述，把功能点罗列出来，然后看哪些功能点职责相近，操作同样的属性，可否应该归为同一个类。如果需求非常复杂，功能点太多，先划分模块，再在模块内部划分和识别类。</p><p>二、定义类及其方法和属性。</p><p>识别出需求描述中的动词和名次，分别作为候选的方法和属性，再进行过滤筛选。</p><p>三、定义类与类之间的交互关系。</p><p>四、将类组装起来并提供执行入口。</p><hr><p>本篇文章是在学习极客时间 - 设计模式之美课程后的总结。可以扫描文章尾部的二维码，到专栏进行系统学习。</p><p><img src="https://blog.ulyssesss.com/assets/img/design-pattern.jpg" alt="设计模式之美"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;什么面向对象编程&quot;&gt;&lt;a href=&quot;#什么面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;什么面向对象编程&quot;&gt;&lt;/a&gt;什么面向对象编程&lt;/h3&gt;&lt;p&gt;面向对象编程（OOP，Object Oriented P
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="面向对象" scheme="https://blog.ulyssesss.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>代码质量</title>
    <link href="https://blog.ulyssesss.com/2020/02/12/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    <id>https://blog.ulyssesss.com/2020/02/12/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/</id>
    <published>2020-02-12T01:46:09.000Z</published>
    <updated>2021-03-17T02:38:24.964Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章的内容源自 <strong>极客时间 - 设计模式之美</strong> ，为其中一节课程的笔记记录，主要介绍了一些常见的代码质量评判维度，以及简要地说明如何写出高质量的代码。</p><p>如果您对文章内容感兴趣，可以扫描文章尾部的二维码，到专栏进行系统学习。</p><a id="more"></a><h2 id="如何评判代码质量"><a href="#如何评判代码质量" class="headerlink" title="如何评判代码质量"></a>如何评判代码质量</h2><p>辨别代码好还是烂，是一种能力，也是写出好代码的前提。</p><p>常见的描述代码质量的词汇包括灵活性（flexibility）、可扩展性（extensibility）、可维护性（maintainability）、可读性（readability）、可理解性（understandability）、易修改性（changeability）、可复用（reusability）、可测试性（testability）、模块化（modularity）、高内聚低耦合（high cohesion loose coupling）、高效（high effciency）、高性能（high performance）、安全性（security）、兼容性（compatibility）、易用性（usability）、整洁（clean）、清晰（clarity）、简单（simple）、直接（straightforward）、少即是多（less code is more）、文档详尽（well-documented）、分层清晰（well-layered）、正确性（correctness、bug free）、健壮性（robustness）、可用性（reliability）、可伸缩性（scalability）、稳定性（stability）、优雅（elegant）、好（good）、坏（bad）等等。</p><p>代码质量高低就像小说的精彩程度，有很强的主观性，并且很难量化。主观评价的准确度，跟工程师自身的经验有很大的关系，经验越丰富，给出的评价越准确。</p><p>以下为几个最常见、最重要的评价标准。</p><h3 id="1-可维护性（maintainability）"><a href="#1-可维护性（maintainability）" class="headerlink" title="1. 可维护性（maintainability）"></a>1. 可维护性（maintainability）</h3><p>维护即修复 bug、调整老代码和添加新代码。</p><p>易维护即在不破坏原有代码设计、不引入新的 bug 的情况下，能够快速地修改或添加代码。反之，不易维护就是指，修改或者添加代码需要冒极大的引入新 bug 的风险，并且完成需要花很长时间。</p><p>通常维护代码的时间远大于编写代码的时间，所以代码的可维护性非常重要。</p><p>可维护性是一个很难量化、偏向对代码整体的评价标准，受很多因素影响。可读性好、简洁、可扩展性好，就会使代码易维护，反之就会使得代码不易维护。</p><p>除此之外，可维护性还跟代码量的多少、业务的复杂程度、所用技术的复杂程度、文档是否全面、团队成员的开发水平等诸多因素有关。</p><p>正面分析代码的可维护性很难，不过可以从侧面给出主观但又比较准确的感受。如果 bug 容易修复，修改或添加功能可以轻松完成，就可以认为代码易维护。反之，如果修复 bug，修改或添加功能，需要花费很长时间，就可以认为代码不易维护。</p><p>可维护性针对的是维护代码的人，不同水平的人对于同一份代码的维护能力不同。</p><h3 id="2-可读性（readability）"><a href="#2-可读性（readability）" class="headerlink" title="2. 可读性（readability）"></a>2. 可读性（readability）</h3><p>Martin Fowler 曾经说过：”Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”</p><p>代码被阅读的次数远超过被编写的次数，所以可读性是评价代码质量最重要的指标之一，并且在很大程度上影响代码的可维护性。</p><p>评价代码的可读性，要看代码是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否符合高内聚低耦合等等。</p><p>正面很难给出一个涵盖所有评价指标的列表，所以可读性也很难量化。Code Review 是一个很好的测验代码可读性的手段，如果你的同事可以轻松读懂你的代码，说明你的代码可读性很好。</p><h3 id="3-可扩展性（extensibility）"><a href="#3-可扩展性（extensibility）" class="headerlink" title="3. 可扩展性（extensibility）"></a>3. 可扩展性（extensibility）</h3><p>可扩展性，即代码应对未来需求变化的能力，同样在很大程度上影响代码的可维护性。</p><p>可扩展性强，即在不修改或少量修改原有代码的情况下，能够通过扩展的方式添加新的功能。代码预留了一些功能扩展点，可以把新功能代码直接插到扩展点上，而不需要大量改动原有代码。</p><h3 id="4-灵活性（flexibility）"><a href="#4-灵活性（flexibility）" class="headerlink" title="4. 灵活性（flexibility）"></a>4. 灵活性（flexibility）</h3><p>灵活性是一个比较抽象的评价标准，含义非常宽泛。易扩展、易复用或易用，都可以称其比较灵活。</p><p>灵活性好，比如要添加一个新功能时，原有代码已经预留好了扩展点，不需要修改原有的代码，只要在扩展点上添加新代码即可；比如要实现一个功能时，原有代码中已经抽象出很多可以复用的模块，可以直接使用；又比如使用某组接口时，接口可以应对各种使用场景，满足各种不同的需求。</p><h3 id="5-简洁性（simplicity）"><a href="#5-简洁性（simplicity）" class="headerlink" title="5. 简洁性（simplicity）"></a>5. 简洁性（simplicity）</h3><p>KISS 原则：Keep It Simple，Stupid。这个原则说的是，尽量保持代码简单。</p><p>代码简单、逻辑清晰，就意味着易读、易维护。</p><p>思从深而行从简，真正的高手能云淡风轻地用最简单的方法解决最复杂的问题。</p><h3 id="6-可复用性（reusability）"><a href="#6-可复用性（reusability）" class="headerlink" title="6. 可复用性（reusability）"></a>6. 可复用性（reusability）</h3><p>可复用性，即尽量减少重复代码的编写，复用已有的代码，是很多设计原则、思想、模式等所追求的效果。</p><h3 id="7-可测试性（testability）"><a href="#7-可测试性（testability）" class="headerlink" title="7. 可测试性（testability）"></a>7. 可测试性（testability）</h3><p>可测试性是一个相对较少被提及，但又非常重要的代码质量评价标准。</p><p>代码可测试性的好坏，能从侧面上非常准确地反应代码质量的好坏。</p><p>代码的可测试性差，比较难写单元测试，基本就能够说明代码设计的有问题。</p><h2 id="如何写出高质量代码"><a href="#如何写出高质量代码" class="headerlink" title="如何写出高质量代码"></a>如何写出高质量代码</h2><p>要写出满足以上评价标准的高质量代码，需要掌握一些更加细化、且能够落地的编程方法论，包括面向对象设计思想、设计原则、设计模式、编码规范、重构技巧等。</p><p>所有编程方法论的最终目的，都是为了编写出高质量的代码。比如，面向对象中的继承、多态能够提高代码的可复用性；编码规范能提高代码的可读性；设计原则中的单一职责原则、里氏替换原则等，能提高代码的可复用性、灵活性、可读性、可扩展性、可维护性；设计模式能提高代码的可扩展性；持续重构可以时刻保持代码的可维护性等等。</p><p><img src="http://image.ulyssesss.com/design-pattern.jpeg" alt="设计模式之美"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章的内容源自 &lt;strong&gt;极客时间 - 设计模式之美&lt;/strong&gt; ，为其中一节课程的笔记记录，主要介绍了一些常见的代码质量评判维度，以及简要地说明如何写出高质量的代码。&lt;/p&gt;
&lt;p&gt;如果您对文章内容感兴趣，可以扫描文章尾部的二维码，到专栏进行系统学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="代码质量" scheme="https://blog.ulyssesss.com/tags/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>运动饮食1:9</title>
    <link href="https://blog.ulyssesss.com/2020/01/08/%E8%BF%90%E5%8A%A8%E9%A5%AE%E9%A3%9F1-9/"/>
    <id>https://blog.ulyssesss.com/2020/01/08/%E8%BF%90%E5%8A%A8%E9%A5%AE%E9%A3%9F1-9/</id>
    <published>2020-01-07T16:06:59.000Z</published>
    <updated>2021-03-17T02:38:24.973Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章为阅读《运动饮食1:9》一书所做的简要笔记，记录减肥相关的知识点。</p><p>运动是必要的，但仅凭运动无法实现减肥的目的，关键在于改变饮食习惯。</p><a id="more"></a><h3 id="迈开腿不如管住嘴"><a href="#迈开腿不如管住嘴" class="headerlink" title="迈开腿不如管住嘴"></a>迈开腿不如管住嘴</h3><h4 id="运动减肥"><a href="#运动减肥" class="headerlink" title="运动减肥"></a>运动减肥</h4><p>要想减肥，必须保证消耗的卡路里小于摄入的卡路里，瘦不下来就是吃的太多。</p><p>饮食习惯是造成肥胖的主要原因，仅凭运动想把吃进去的能量消耗掉，是不切实际的。</p><p>运动会产生成就感，会产生变瘦的错觉，更会解放食欲。</p><p>跑步 30 分钟大约只消耗 300 千卡能量，一个甜面包就能补回来，而 1 千克脂肪含 7200 千卡能量。</p><p>高强度运动和为了减肥而进行的短期运动，消耗的能量大多来自于肝脏和肌肉中的糖原，而非脂肪。糖分被消耗掉之后，身体需要恢复到正常状态，所以对糖分的需求就更高。</p><h4 id="有氧运动"><a href="#有氧运动" class="headerlink" title="有氧运动"></a>有氧运动</h4><p>有氧运动即运动强度较低、持续时间较长、全身主要肌群共同参与的运动，氧气的利用率越高有氧性越高。反之，短期内的高强度运动称为无氧运动。</p><p>最容易燃烧脂肪的有氧运动，所消耗的能量也仅有一半来自脂肪，另一半来自于糖分。</p><p>长时间运动，脑内会分泌一种叫做内啡肽的神经传导物质，使人亢奋。</p><h4 id="基础代谢"><a href="#基础代谢" class="headerlink" title="基础代谢"></a>基础代谢</h4><p>基础代谢指一个人一天什么都不做，仅维持生命所要消耗的能量。</p><p>基础代谢有一个普遍观点，通过肌肉训练增加肌肉量，进而提高基础代谢，成为易瘦体质。但基础代谢中，肌肉仅占 18 % ，内脏消耗占 80 % 。增加 1 千克肌肉仅能将基础代谢提升 15 ~ 45 千卡。</p><p>普通女性基础代谢约为 1200 千卡，男性 1500 千卡，加上运动代谢的能量，女性一天约消耗 1800 千卡，男性约为 2400 千卡。</p><h3 id="危险食物"><a href="#危险食物" class="headerlink" title="危险食物"></a>危险食物</h3><h4 id="碳水化合物"><a href="#碳水化合物" class="headerlink" title="碳水化合物"></a>碳水化合物</h4><p>三大营养素：蛋白质、脂肪和碳水化合物。</p><p>碳水化合物，即平时所说的糖，米饭、面条、面包是碳水化合物的典型代表。几乎所有肥胖的人都摄入了过量的碳水化合物。</p><p>糖以血糖形式遍布全身，血液中血糖浓度称为血糖值，在消化吸收糖分后会上升。血糖上升会导致胰岛素的分泌，从而使血糖下降至正常水平。</p><p>GI 值（Glycemic Index）表示血糖值上升时糖分吸收的速度。食用后血糖值立刻上升的为高 GI 食品，上升慢的为 低 GI 食品。</p><p>食用高 GI 食品，会使大脑认为血糖上升过快，迅速分泌胰岛素，反而更加想吃东西。</p><p>减少糖的摄入量，确实有减肥的效果，但容易反弹。因为断糖会出现倦怠等不适应症状，大多数人通常只能坚持两个月。</p><p>减肥要尽可能选择低 GI 的碳水，而不是简单地断糖。尽量避免摄入经过深加工的糖以及液体化的糖，自然食品中的糖不用过于敏感地排斥。</p><h4 id="垃圾食品"><a href="#垃圾食品" class="headerlink" title="垃圾食品"></a>垃圾食品</h4><p>垃圾食品，指含有极高的卡路里，缺少维生素和矿物质，含有很多吸收速度极快的碳水和对身体有害的脂肪，以及大量添加剂的食物。如炸薯条、汉堡、薯片、爆米花，速食点心、面包、蛋糕和冰淇淋也属于垃圾食品。</p><p>垃圾食品中存在反式脂肪酸，一种为了延长保质期而人工合成的脂肪酸，典型代表为人造黄油。摄入反式脂肪酸会给消化器官造成极大负担，甚至引发疾病。</p><blockquote><p>美国作为垃圾食品大国，已经严禁使用反式脂肪酸了，可见其危害的严重性。</p><p>中国也要求在食品说明书上表明反式脂肪酸的含量。</p></blockquote><p>垃圾食品中另一个危险的东西是 AGEs，即晚期糖基化终末产物，由过量的糖和蛋白质通过热结合产生，如蛋糕烤熟后暗橙色的物质。血糖与肌肉和皮肤等蛋白质结合也会产生 AGEs 。</p><p>现代科学认为，AGEs 是导致黄褐斑、皱纹以及皮肤松弛的原因，还可能引发白内障和心脏病。糖化 = 细胞老化。</p><h4 id="加工食品"><a href="#加工食品" class="headerlink" title="加工食品"></a>加工食品</h4><p>超市里的巧克力不是真正的巧克力，成分最多的是砂糖，很多无添加、低盐也是惯用幌子，都必须进行防腐加工。24 小时便利店中任何时候都可以吃到东西的状态本身就是不正常的。</p><p>零卡路里饮料会使味觉以及精神层面对甜味变得迟钝，使肥胖风险增加 6 倍。</p><p>浓缩蔬菜汁和果汁中天然营养素很少，且无食物纤维导致容易摄入过量的糖，绝不是健康饮品。</p><p>一定要买加工食品，请买贵 3 倍的食物。</p><h3 id="饮食习惯"><a href="#饮食习惯" class="headerlink" title="饮食习惯"></a>饮食习惯</h3><h4 id="N-C-比"><a href="#N-C-比" class="headerlink" title="N/C 比"></a>N/C 比</h4><p>你现在的身体状态，是你选择、摄取、吸收的食物所表现出来的结果。</p><p>食物中除蛋白质、脂肪、碳水化合物这三种含卡路里的营养素外，还有矿物质营养素和维生素。</p><p>食物中矿物质营养素和维生素含量与总卡路里含量的比率，称为 N/C 比，Nutrient value / Calorie。</p><p>维生素和矿物质对代谢非常重要，是脂肪燃烧不可缺少的营养成分。高 N/C 比食物减肥法，是最有效的减肥方式。</p><h4 id="高-N-C-比食物"><a href="#高-N-C-比食物" class="headerlink" title="高 N/C 比食物"></a>高 N/C 比食物</h4><p>绿色蔬菜，指胡萝卜、南瓜、番茄、青椒、菠菜等深颜色的蔬菜，有助于减肥。</p><p>裙带菜、海带等海藻类，和芝麻、核桃等种子类食物，含适量的镁、钙、锌、铁等矿物质，还有丰富的维生素。种子类食物中还含有优质的脂肪。</p><p>蘑菇，含丰富的维生素，卡路里含量很低。</p><p>芋头类，如甘薯、芋头、山药，虽然属于碳水化合物，但维生素丰富，且含有很多食物纤维，适合作为减肥食品。</p><p>三大营养素中蛋白质最容易摄取不足，应从豆类和鱼类中主动摄取。肉类也可以吃，但不应该作为主要的蛋白质摄取源，控制在两成左右。</p><p>唯一对减肥有益的动物蛋白就是鱼类，含 DHA 和 EPA 等不容易产生体脂肪的优质油，且富含矿物质和植物性食物很难提供的 B 族维生素。</p><p>吃了低 N/C 比的食物后，应利用高 N/C 比食物进行中和，保证总体平衡，是减肥的关键。</p><h4 id="脂肪"><a href="#脂肪" class="headerlink" title="脂肪"></a>脂肪</h4><p>脂肪是仅次于碳水化合物的肥胖原因，而完全不摄入脂肪，会导致肌肤干燥、头发失去光泽等问题。</p><p>脂肪分解后产生脂肪酸，分为饱和脂肪酸（脂）和不饱和脂肪酸（油）。</p><p>饱和脂肪酸在常温下成块状，加热后仍能保持某种形状。这种物质很难被消化，过量摄取会导致血液黏稠，甚至导致血栓。</p><p>不饱和脂肪酸分为 ω-3 、ω-6 和 ω-9 几种。其中 ω-3 和 ω-6 人体无法合成，必须通过食物获取。</p><p>ω-3 具有抗炎症、疏通血管等作用，在鱼类和坚果类中含量较高，大多人体内缺乏这种脂肪酸，应积极摄取。</p><p>ω-6 和饱和脂肪酸一样会使血液黏稠，还可能使体内炎症恶化，过量摄入甚至引起脑梗、心肌梗塞和癌症等，并且被认为是导致遗传性皮炎和花粉症等过敏症状的原因。应尽量减少大豆油、菜籽油和葵花油等的摄入。</p><p>ω-3 和 ω-6 的理想状态为 1:4 ，但现代人摄入比例为 1:10 到 1:50 。</p><p>实际上人体存在瘦素（Leptin）这种激素，在脂肪增加时自动分泌，ω-3 摄入不足和过量摄入 ω-6 和反式脂肪酸会阻碍瘦素分泌。</p><p>ω-9 人体可以合成，没必要通过食物摄取，但可以为减少 ω-6 而适当用 ω-9（橄榄油、芝麻油）代替。</p><h4 id="酒"><a href="#酒" class="headerlink" title="酒"></a>酒</h4><p>酒精虽然含卡路里，但大多在身体吸收前燃烧掉，也就是说仅凭酒精是不会使人变胖，不过酒中除了酒精还有糖。</p><p>酒分为红酒、啤酒等酿造酒和烧酒、威士忌、白兰地等蒸馏酒。</p><p>酿造酒是谷物和果汁等经过酒精发酵的产物，含大量的糖分；而蒸馏酒是酿造酒蒸馏后，将酒精等挥发成分浓缩的产物，糖分已被去除。喝过量的酿造酒，其中的糖会造成肥胖。</p><p>酒和加工食品一样，越便宜的酒里面不纯物质越多，会给肝脏造成负担，所以不要喝便宜货。</p><p>酒也会增加食欲，使人更容易吸收脂肪。</p><p>肝脏分解酒精会消耗维生素和矿物质，而这些都是燃烧脂肪必需的营养素，需要注意补充这些营养素。</p><h4 id="断食"><a href="#断食" class="headerlink" title="断食"></a>断食</h4><p>以健康为目的、以低卡路里高营养的发酵饮品为主食的断食有助于减肥。</p><p>血糖一旦降低就进食，会使身体燃烧脂肪提高血糖值的能力退化，适当断食会改变这种情况，打开燃烧脂肪的开关。</p><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>如果只为了减肥，每周 1 到 2 次的运动就足以使身体发生改变，也没有必要特意去健身房。</p><p>散步是很好的运动方式，每天走 8000 步以上，就是很客观的运动量了。无法满足每日步数，可以每周找两天走 30 到 60 分钟。</p><p>倒立是另一项推荐的运动，有抗衰老、消除浮肿等作用。如果平时缺乏运动，可以借助墙壁进行倒立，尽量不要勉强。开始倒立时，血液聚集在头部会使脸变红，但如果每天坚持倒立，身体会逐渐适应。</p><p>减肥只要进行散步和倒立这样的运动就足够了。健美的体型需要通过运动获得，但减肥主要通过改善饮食习惯来实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章为阅读《运动饮食1:9》一书所做的简要笔记，记录减肥相关的知识点。&lt;/p&gt;
&lt;p&gt;运动是必要的，但仅凭运动无法实现减肥的目的，关键在于改变饮食习惯。&lt;/p&gt;
    
    </summary>
    
    
      <category term="方法论" scheme="https://blog.ulyssesss.com/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="减肥" scheme="https://blog.ulyssesss.com/tags/%E5%87%8F%E8%82%A5/"/>
    
  </entry>
  
  <entry>
    <title>刻意练习</title>
    <link href="https://blog.ulyssesss.com/2019/11/05/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/"/>
    <id>https://blog.ulyssesss.com/2019/11/05/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/</id>
    <published>2019-11-05T02:49:15.000Z</published>
    <updated>2021-03-17T02:38:24.965Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章为阅读《刻意练习》一书所做的简要笔记，将集中记录书中对本人产生较大影响的重要观点。</p><p>受篇幅限制，本篇文章不会对所涉及的观点做详细解释，也不会提及任何可增强理解的小故事。</p><p>如果您对文章中提到的观点感兴趣，可以直接阅读《刻意练习》一书。</p><a id="more"></a><h3 id="天才是训练的产物"><a href="#天才是训练的产物" class="headerlink" title="天才是训练的产物"></a>天才是训练的产物</h3><p>大脑拥有极强的适应能力，专注训练可以促使大脑做出改变，人不仅可以挖掘潜力，更能创造潜力。</p><blockquote><p>雷·阿伦：不要低估我每天付出的巨大努力，不是一天两天，是每一天。</p></blockquote><h3 id="有目的的练习"><a href="#有目的的练习" class="headerlink" title="有目的的练习"></a>有目的的练习</h3><p>一般而言，从开始学习，到水平可以接受，再到能够自然地做出反应，如果接下来的练习不够有效，就很难再有进步。</p><p>有目的的练习，即走出舒适区，制定明确的目标，为目标制定计划，分解目标，并想出监测进步的方法，专注地练习，而且需要保持动机。</p><p>遇到瓶颈时，试着做不能的事情，而非更难的事情。也可能并非到达瓶颈，而是心理因素或动机不足。</p><h3 id="大脑的适应能力"><a href="#大脑的适应能力" class="headerlink" title="大脑的适应能力"></a>大脑的适应能力</h3><p>大脑拥有无限的适应能力，结构与运行都会为了应对各种不同的心理训练而改变，很大程度上像肌肉和心血管系统响应体育锻炼。</p><p>人的身体偏爱稳定性，被迫走出舒适区会重建体内平衡，逐步建立新的舒适区。要使改变不断进行下去，必须不断加码。</p><p>挑战越大，变化越大，但不要太过。对于舒适区外却离得不太远的挑战，大脑和身体的改变最为迅速。</p><p>三个细节：年轻人的大脑比成年人的大脑更具适应能力；通过长时间训练发展大脑中的某些部位，可能导致某些其他能力下降；由训练引起的变化需要持续保持，停止训练就开始消失。</p><h3 id="心理表征"><a href="#心理表征" class="headerlink" title="心理表征"></a>心理表征</h3><p>心理表征是一种我们大脑正在思考的某个物体、某个观点、某些信息或其他任何事物相对应的<strong>心理结构</strong>，或具体或抽象。比如提到蒙娜丽莎脑海中油画的形象。</p><p>心理表征保存在长时记忆中，是信息预先存在的模式，使人可以有效且迅速地处理信息，能够回避短时记忆存在容量有限等局限。刻意练习包括创建心理表征。</p><p>心理表征有助于找出规律，从而做到预测未来（如篮球比赛中预测对手的动作）和无意识决策。</p><p>心理表征有助于解释信息，理解和解读它，在记忆中组织它、分析它，并用它来决策。</p><p>心理表征有助于组织信息，好的心理表征使人可以立即吸收和考虑更多的信息。</p><p>心理表征有助于指定计划，监测、评估、提升自己技能水平，并在必要时调整心理表征使之更加高效。</p><p>心理表征有助于高效学习，敏锐地察觉自己所犯的错误并加以改正。技能与心理表征是一个良性循环。</p><h3 id="黄金标准"><a href="#黄金标准" class="headerlink" title="黄金标准"></a>黄金标准</h3><p>在所有的行业和领域中，有些训练方法比另一些更有效。刻意练习是最有效、最理想的方法，它是黄金标准。</p><p>刻意练习具有以下特点：</p><ul><li>刻意练习发展的技能，已经拥有一整套行之有效的训练方法，训练方案由导师设计和监管，他们既熟悉杰出人物的能力，也熟悉如何最好地提升能力。</li><li>发生在舒适区之外（一般这并不令人心情愉悦）。</li><li>包含良好定义的特定目标，及目标达成的具体表现，而非某些模糊的总体目标。</li><li>专注和有意识的行动，紧跟目标，控制练习。</li><li>包含反馈，以及根据反馈努力进行调整。</li><li>既产生有效的心理表征，又依靠有效的心理表征。</li><li>着重关注已有技能的某些方面，并致力于有针对性地提高，不断改进。</li></ul><p>并非每个行业和领域都能进行严格意义的刻意练习，不必担心，尽可能遵循刻意练习的原则，可能依然是最有效的练习方式。</p><p>可以通过额外步骤尽可能遵循刻意练习的原则。首先辨别杰出人物，尽可能通过客观的、可复制的测量指标。接着找出杰出人物和其他人的差别。不过最佳方式还是找到优秀导师。</p><h3 id="工作中运用刻意练习"><a href="#工作中运用刻意练习" class="headerlink" title="工作中运用刻意练习"></a>工作中运用刻意练习</h3><p>三种错误思想：能力受基因特征限制；长时间做某件事一定会有提升；努力、刻苦就能优秀。</p><p>边干边学，养成练习的习惯，并思考如何练习。</p><p>要使用或创建有反馈的训练工具，并不断改进心理表征（尝试在某个决策点停下来，如观看篮球比赛录像，暂停并思考进攻选择）。</p><p>了解知识和技能之间的区别，聚焦于绩效、表现，以及如何提高绩效和表现。</p><h3 id="生活中运用刻意练习"><a href="#生活中运用刻意练习" class="headerlink" title="生活中运用刻意练习"></a>生活中运用刻意练习</h3><p>开始学习一门技能时，找到好导师尤其重要，有助于创建新的、更有效的心理表征。</p><p>导师只能引导你达到他们或他们的学生曾经达到过的水平，当自己提升到一定水准，需要更换导师。</p><p>投入和专注至关重要，如果你在走神，或者你很放松，你可能不会进步。</p><p>如果不能集中注意力，尝试把训练时间缩短，在短时间内集中注意力，并逐渐延长。</p><p>没有导师的情况下，需要自己设计练习方法、创造练习机会，用三个 F 建立有效的心理表征： focus （专注）、 feedback （反馈）和 fix it （纠正）。</p><p>将技能分解成一些组成部分，反复练习，有效地分析、确定不足之处，并聚焦于在那些地方取得进步。</p><p>遇到瓶颈时，在不同类型的训练之间切换，找到并攻克特定的弱点。你不能再提高，可能只是那项技能中的一两个组成部分在妨碍你，不是所有的组成部分都在绊住你。</p><p>想办法逼自己一下通常会帮你确定瓶颈的停滞点在哪，如跟更高水平的网球运动员比赛弱点会更明显地暴露出来。</p><p>保持动机可能是每个投入到练习中的人面对的最大问题，不存在可以在任何情形中运用的一般意志力（运动员可能无法坚持弹钢琴）。</p><p>保持动机，要么强化继续前进的理由，要么弱化停下脚步的理由。</p><p>控制可能带来干扰练习的事，如保证睡眠质量、预留固定的练习时间。</p><p>一旦练习有了效果，技能本身就可以成为动机的一部分。</p><p>身边人的鼓励可以强化继续前进的理由，将对同样事情感兴趣的人聚集起来，或者加入一个现有团体，会出现达成目标的额外动机。</p><p>想要放弃时，和自己达成协议，越过停滞阶段或恢复到之前的状态再放弃。</p><p>刻意练习的核心是一种孤独的追求，将旅程分解成一系列可控的目标，每次只关注其中一个，甚至可以在达成目标后给自己小小的奖励。</p><h3 id="杰出人物路线图"><a href="#杰出人物路线图" class="headerlink" title="杰出人物路线图"></a>杰出人物路线图</h3><p>成为杰出人物通常有 4 个阶段：产生兴趣，变得认真，全力投入，开拓创新。</p><p>日后成为杰出人物的孩子，父母在其成长和发展中扮演了至关重要的角色，兄弟姐妹也有明显的激励作用。</p><p>父母和导师可以采用许多方法激励孩子，但动机必须来自孩子的内心，否则不会长久。</p><p>随年龄增大，身体的适应能力会减弱，但心理的适应能力依然十分强大。</p><p>杰出人物的进展只有在局外人眼中才是重大进展，他们没有见证过那些微小的进展，正式微小的进展最终累积成大的飞跃。</p><h3 id="天生才华"><a href="#天生才华" class="headerlink" title="天生才华"></a>天生才华</h3><p>长远看来，占上风的是那些练习更勤奋的人，是拥有更高质量的心理表征和能够更加有效运用心理表征的人，而不是一开始在智商或其他才能方面稍有优势的人，</p><p>练习是决定某人在特定行业和领域中最终成就的唯一重要因素，基因在其中的作用会慢慢消失。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章为阅读《刻意练习》一书所做的简要笔记，将集中记录书中对本人产生较大影响的重要观点。&lt;/p&gt;
&lt;p&gt;受篇幅限制，本篇文章不会对所涉及的观点做详细解释，也不会提及任何可增强理解的小故事。&lt;/p&gt;
&lt;p&gt;如果您对文章中提到的观点感兴趣，可以直接阅读《刻意练习》一书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="方法论" scheme="https://blog.ulyssesss.com/categories/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
    
      <category term="行动" scheme="https://blog.ulyssesss.com/tags/%E8%A1%8C%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Redis 消息队列</title>
    <link href="https://blog.ulyssesss.com/2019/08/20/Redis-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>https://blog.ulyssesss.com/2019/08/20/Redis-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2019-08-20T10:14:08.000Z</published>
    <updated>2021-03-17T02:38:24.961Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 可用作轻量级的消息队列，使用简单。</p><p>不过 Redis 不是专业的消息队列，缺少很多的高级功能，比如没有 ack 保证（ Acknowledgement ，消息确认机制）。如果对消息可靠性有较高的要求，就不适合使用 Redis 消息队列。</p><a id="more"></a><h3 id="异步消息队列"><a href="#异步消息队列" class="headerlink" title="异步消息队列"></a>异步消息队列</h3><p>Redis 中的 list 数据结构常用作异步消息队列，通过 lpush 或 rpush 指令操作入队列，通过 lpop 或 rpop 指令操作出队列，支持多个生产者和一组消费者（组内每个消费者拿到不同的列表元素），示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 消息入队列</span><br><span class="line"><span class="meta">&gt;</span> rpush notify-queue java python golang</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">&gt;</span> rpush notify-queue php</span><br><span class="line">(integer) 4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 消息出队列</span><br><span class="line"><span class="meta">&gt;</span> lpop notify-queue</span><br><span class="line">"java"</span><br><span class="line"><span class="meta">&gt;</span> lpop notify-queue</span><br><span class="line">"python"</span><br></pre></td></tr></table></figure><h4 id="空队列处理"><a href="#空队列处理" class="headerlink" title="空队列处理"></a>空队列处理</h4><p>如果队列中的消息全部处理完成，pop 指令获取不到元素，客户端会陷入循环，浪费资源。</p><p>一种解决方法是让客户端线程 sleep ，每隔一段时间尝试一次获取消息，缺点是消息的消费会存在延迟。</p><p>更好的解决方法是使用 blpop 或 brpop 指令来阻塞读取消息，b 表示 blocking ，没有新消息时阻塞，来新消息时能够立即获取到消息。</p><p>需要注意的是，如果阻塞时间过长，Redis 服务端会主动断开连接以回收资源，blpop 或 brpop 会抛出异常，客户端消费者需要捕获异常并重试，示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 读取消息，最长阻塞时间 5 s</span><br><span class="line"><span class="meta">&gt;</span> blpop notify-queue 5</span><br><span class="line">1) "notify-queue"</span><br><span class="line">2) "golang"</span><br><span class="line"><span class="meta">&gt;</span> blpop notify-queue 5</span><br><span class="line">1) "notify-queue"</span><br><span class="line">2) "php"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 5 s 内未读取到消息，断开</span><br><span class="line"><span class="meta">&gt;</span> blpop notify-queue 5</span><br><span class="line">(nil)</span><br><span class="line">(5.04s)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生产消息</span><br><span class="line"><span class="meta">&gt;</span> rpush notify-queue C#</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 阻塞 3.05 s 读取到消息</span><br><span class="line"><span class="meta">&gt;</span> blpop notify-queue 5</span><br><span class="line">1) "notify-queue"</span><br><span class="line">2) "C#"</span><br><span class="line">(3.05s)</span><br></pre></td></tr></table></figure><h3 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h3><p>延时队列可以通过 Redis 中的 zset 数据结构来实现，其中消息的内容作为 zset 的 value ，消息的到期处理时间作为 zset 的 score 。</p><p>使用时通过 zadd 指令生产消息，多个客户端线程通过 zrangebyscore 指令读取队列中的消息，再通过 zrem 指令来确定消息的所属消费者，成功删除消息的消费者执行消费逻辑，示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 生产消息 zadd &lt;key&gt; &lt;score&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">&gt;</span> zadd delay-queue 1566298823195 msg1</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取消息 zrangebyscore &lt;key&gt; &lt;min-score&gt; &lt;max-score&gt; &lt;offset&gt; &lt;count&gt;</span><br><span class="line"><span class="meta">&gt;</span> zrangebyscore delay-queue 0 1566298924936 0 1</span><br><span class="line">1) "msg1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除消息成功，执行消费逻辑 zrem &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">&gt;</span> zrem delay-queue msg1</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除消息失败，消息已被其他消费者消费</span><br><span class="line"><span class="meta">&gt;</span> zrem delay-queue msg1</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><blockquote><p>示例中同一个任务被多个线程取到后，再通过删除决定从属关系，可以通过 lua 脚本将 zrangebyscore 和 zrem 一同在服务端进行原子化操作，从而节约资源。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 可用作轻量级的消息队列，使用简单。&lt;/p&gt;
&lt;p&gt;不过 Redis 不是专业的消息队列，缺少很多的高级功能，比如没有 ack 保证（ Acknowledgement ，消息确认机制）。如果对消息可靠性有较高的要求，就不适合使用 Redis 消息队列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Redis" scheme="https://blog.ulyssesss.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 分布式锁</title>
    <link href="https://blog.ulyssesss.com/2019/08/19/Redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://blog.ulyssesss.com/2019/08/19/Redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2019-08-19T08:57:48.000Z</published>
    <updated>2021-03-17T02:38:24.961Z</updated>
    
    <content type="html"><![CDATA[<p>分布式应用进行逻辑处理需要考虑并发问题。</p><p>一个常见的场景如修改用户状态，修改前需要先读取用户当前状态，修改后进行保存。由于整个过程不是原子操作，一旦多个操作同时进行，就可能导致状态异常。</p><p>引入分布式锁可以解决上述问题，而 Redis 分布式锁是使用非常广泛的一种实现方式。</p><a id="more"></a><h3 id="分布式锁的特性"><a href="#分布式锁的特性" class="headerlink" title="分布式锁的特性"></a>分布式锁的特性</h3><p>分布式锁需要具备获取锁、释放锁的功能，并且需要能够处理异常情况。</p><h4 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h4><p>Redis 中的 setnx 指令可以用于实现获取锁的操作， set if not exists ，在锁没有被其他客户端占有的情况下获取锁，先来先占。</p><h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><p>Redis 中的 del 指令可以用于实现释放锁的操作，逻辑处理完成之后通过 del 删除指定的 key 来释放锁。</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>如果在逻辑处理执行过程中发生异常，可能会导致 del 指令不被调用，锁会一直得不到释放。</p><p>解决方法是在获取锁的同时给锁加一个过期时间，确保即使出现异常也会在过期后自动释放。</p><p>在 Redis 2.8 版本之前，没有 setnx 和 expire 合并到一起的原子指令，如果分开执行可能在 setnx 成功后 expire 指令执行失败，依然造成死锁。而 Redis 又不支持事务中 if - else 分支逻辑，所以 Redis 开源社区涌现了很多 Library 来解决这个问题。</p><p>Redis 2.8 版本中加入了 set 指令的扩展参数，使 setnx 和 expire 指令可以作为原子操作来执行，格式为 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> set &lt;key&gt; &lt;value&gt; ex &lt;seconds&gt; nx</span><br><span class="line"><span class="meta">&gt;</span> set lock:update true ex 5 nx</span><br></pre></td></tr></table></figure><h4 id="超时问题"><a href="#超时问题" class="headerlink" title="超时问题"></a>超时问题</h4><p>Redis 的分布式锁不能解决超时问题，所以 Redis 分布式锁不适用于耗时较长的任务。</p><p>如果获取锁后的操作耗时太长，超过锁的过期时间，其他线程就可以提前获取到锁，导致临界区代码不能得到严格的串行执行。</p><h4 id="可重入性"><a href="#可重入性" class="headerlink" title="可重入性"></a>可重入性</h4><p>可重入性，指线程在持有锁的情况下，能够再次请求获取到锁，比如 Java 中的 ReentrantLock 就是可重入锁。</p><p>Redis 分布式锁如果需要支持可重入，可以对客户端 set 方法进行包装，通过 ThreadLocal 存储当前持有锁的计数。</p><p>可重入锁还需要考虑内存锁计数的过期时间等问题，代码复杂度会持续升高，最好通过合理的处理逻辑来避免使用可重入锁。</p><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 线程一获取锁</span><br><span class="line"><span class="meta">#</span> 如果 lock:test 不存在，则设置 lock:test 键的值为 true ，10秒后过期</span><br><span class="line"><span class="meta">&gt;</span> set lock:test true ex 10 nx</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 线程二同时请求获取锁，获取失败</span><br><span class="line"><span class="meta">&gt;</span> set lock:test true ex 10 nx</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 线程一业务逻辑处理 ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 线程一释放锁</span><br><span class="line"><span class="meta">#</span> 删除 lock:test</span><br><span class="line"><span class="meta">&gt;</span> del lock:test</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式应用进行逻辑处理需要考虑并发问题。&lt;/p&gt;
&lt;p&gt;一个常见的场景如修改用户状态，修改前需要先读取用户当前状态，修改后进行保存。由于整个过程不是原子操作，一旦多个操作同时进行，就可能导致状态异常。&lt;/p&gt;
&lt;p&gt;引入分布式锁可以解决上述问题，而 Redis 分布式锁是使用非常广泛的一种实现方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Redis" scheme="https://blog.ulyssesss.com/tags/Redis/"/>
    
      <category term="分布式" scheme="https://blog.ulyssesss.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redis 安装和基础数据结构</title>
    <link href="https://blog.ulyssesss.com/2019/08/16/Redis-%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://blog.ulyssesss.com/2019/08/16/Redis-%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2019-08-16T03:12:00.000Z</published>
    <updated>2021-03-17T02:38:24.961Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 包含 5 中基础数据结构，分别为字符串 string 、列表 list 、字典 hash 、集合 set 和有序集合 zset 。</p><p>本篇文章简要介绍 Redis 的安装和这 5 种基础数据结构的使用。</p><a id="more"></a><h3 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h3><p>官网下载源码压缩包，如 <code>redis-5.0.5.tar.gz</code> ，解压后编译即可完成安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd redis-5.0.5</span><br><span class="line"><span class="meta">$</span> make</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 运行 Redis 服务器</span><br><span class="line"><span class="meta">#</span> --daemonize yes 或在 redis.conf 中修改 daemonize 为 yes 表示后台运行</span><br><span class="line"><span class="meta">$</span> cd src</span><br><span class="line"><span class="meta">$</span> ./redis-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 运行命令行客户端</span><br><span class="line"><span class="meta">$</span> ./redis-cli</span><br></pre></td></tr></table></figure><h3 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h3><p>Redis 中所有的数据结构都以唯一的 key 作为名称，通过 key 来获取相应的 value。不同数据结构类型的差异在于 value 的结构不一样。</p><p>list 、 set 、hash 和 zset 这四种数据结构为容器型结构，对其进行操作时，如果 key 不存在则先创建再操作，最后一个元素被删除时数据结构被删除。</p><p>Redis 中可以对 key 设置过期时间，到时间会自动删除 key ，常用于控制缓存的失效时间。</p><p>需要注意的是，只能对整个 key 设置过期时间，不能对某个子 key 设置过期时间，另外对已经设置了过期时间的 key 进行修改，过期时间会消失。</p><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><p>字符串是 Redis 中最简单的数据结构，可以动态地修改字符串，常见的用法如缓存用户信息。</p><p>string 的内部表示是一个字符数组，类似于 Java 中的 ArrayList ，通过预分配冗余空间来减少内存的频繁分配。</p><p>当字符串长度小于 1 MB 时，按现有空间加倍扩容，超过 1 MB 时每次扩容 1 MB ，最大长度为 512 MB 。</p><p>string 的操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置 name 的值为 Jack</span><br><span class="line"><span class="meta">&gt;</span> set name Jack</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取 name 的值</span><br><span class="line"><span class="meta">&gt;</span> get name</span><br><span class="line">"Jack"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 判断是否存在键 name</span><br><span class="line"><span class="meta">&gt;</span> exists name</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除键 name</span><br><span class="line"><span class="meta">&gt;</span> del name</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 批量设置</span><br><span class="line"><span class="meta">&gt;</span> mset name1 Jack name2 Tony name3 Jay</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 批量获取</span><br><span class="line"><span class="meta">&gt;</span> mget name1 name2 name3</span><br><span class="line">1) "Jack"</span><br><span class="line">2) "Tony"</span><br><span class="line">3) "Jay"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置 5 秒后过期</span><br><span class="line"><span class="meta">&gt;</span> expire name1 5</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置 key 且 5 秒后过期，相当于 set + expire</span><br><span class="line"><span class="meta">&gt;</span> setex name 5 Jack</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 如果 key 不存在就创建</span><br><span class="line"><span class="meta">&gt;</span> setnx name Jack</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 如果 value 为整数，可以对其进行自增操作</span><br><span class="line"><span class="meta">&gt;</span> set age 18</span><br><span class="line">OK</span><br><span class="line"><span class="meta">&gt;</span> incr age</span><br><span class="line">(integer) 19</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> age 的值加 5（可传入负数表示减操作）</span><br><span class="line"><span class="meta">&gt;</span> incrby age 5</span><br><span class="line">(integer) 24</span><br></pre></td></tr></table></figure><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>Redis 中的列表相当于 Java 中的 LinkedList，是链表而非数组。插入和删除操作非常快，时间复杂度 O(1) ，但索引定位很慢，时间复杂度 O(n) 。</p><p>Redis 底层存储的不是简单的 LinkedList ，而是称为 QuickList 的结构。元素较少时使用连续的内存存储（ziplist 压缩列表），元素多时将多个 ziplist 组成链表，既满足快速插入删除的性能，又节约了空间。</p><p>Redis 列表常用做异步队列，将任务塞进列表，另一个线程从列表中轮询数据进行处理。</p><p>list 的操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 向右插入一个或多个元素</span><br><span class="line"><span class="meta">&gt;</span> rpush books b1 b2 b3</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 向左插入一个或多个元素</span><br><span class="line"><span class="meta">&gt;</span> lpush books b4 b5 b6</span><br><span class="line">(integer) 6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取列表长度</span><br><span class="line"><span class="meta">&gt;</span> llen books</span><br><span class="line">(integer) 6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 从左侧弹出一个元素</span><br><span class="line"><span class="meta">&gt;</span> lpop books</span><br><span class="line">"b6"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 从右侧弹出一个元素</span><br><span class="line"><span class="meta">&gt;</span> rpop books</span><br><span class="line">"b3"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取指定索引的元素</span><br><span class="line"><span class="meta">&gt;</span> lindex books 3</span><br><span class="line">"b2"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 截取指定索引内的列表，仅保留截取范围内的区间</span><br><span class="line"><span class="meta">#</span> index 可以为负数，-1 表示倒数第一个元素，-2 表示倒数第二个元素</span><br><span class="line"><span class="meta">&gt;</span> ltrim books 1 2</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取指定索引区间的元素</span><br><span class="line"><span class="meta">&gt;</span> lrange books 0 -1</span><br><span class="line">1) "b4"</span><br><span class="line">2) "b1"</span><br></pre></td></tr></table></figure><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4><p>Redis 中的字典相当于 Java 中的 HashMap ，实现结构也与 Java 一致，即数组和链表的二维结构，一维 hash 数组位置碰撞时，将碰撞的元素用链表串起来。</p><p>Redis 中字典的值只能是字符串，另外 rehash 时采用了渐进式 rehash 策略。</p><p>渐进式 rehash 策略在执行时，会同时保留两个 hash 结构，查询时同时查询两个结构，由定时任务循序渐进地将旧 hash 中的数据转移到新 hash 中，全部转移完成用新的 hash 取代旧的，旧的 hash 被删除。</p><p>字典可用于按字段存储用户信息，从而不必获取全部的信息，不过 hash 结构的存储消耗要高于字符串。</p><p>hash 的操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 对指定键插入 key - value ，更新操作返回 0</span><br><span class="line"><span class="meta">&gt;</span> hset books redis RedisBook</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span> hset books java JavaBook</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span> hset books java NewJavaBook</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取指定字典的全部内容</span><br><span class="line"><span class="meta">&gt;</span> hgetall books</span><br><span class="line">1) "redis"</span><br><span class="line">2) "RedisBook"</span><br><span class="line">3) "java"</span><br><span class="line">4) "NewJavaBook"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取字典长度</span><br><span class="line"><span class="meta">&gt;</span> hlen books</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取字典中指定 key 的 value</span><br><span class="line"><span class="meta">&gt;</span> hget books redis</span><br><span class="line">"RedisBook"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 批量插入 key - value</span><br><span class="line"><span class="meta">&gt;</span> hmset books python PythonBook golang GolangBook</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 对字典中单个 key 进行计数操作</span><br><span class="line"><span class="meta">&gt;</span> hset books number 1</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span> hincrby books number 5</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>Redis 中的集合相当于 Java 中的 HashSet ，键值对无序且唯一，内部实现相当于一个特殊的字典，value 都是 NULL 。</p><p>集合可用于存储活动中奖用户 ID ，保证一个用户不会中奖两次。</p><p>set 的操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 向集合中插入一个或多个元素</span><br><span class="line"><span class="meta">&gt;</span> sadd books python</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span> sadd books python</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">&gt;</span> sadd books java golang</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取集合中全部元素</span><br><span class="line"><span class="meta">&gt;</span> smembers books</span><br><span class="line">1) "python"</span><br><span class="line">2) "golang"</span><br><span class="line">3) "java"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取集合大小</span><br><span class="line"><span class="meta">&gt;</span> scard books</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 判断元素是否在集合中</span><br><span class="line"><span class="meta">&gt;</span> sismember books java</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 弹出一个元素</span><br><span class="line"><span class="meta">&gt;</span> spop books</span><br><span class="line">"golang"</span><br></pre></td></tr></table></figure><h4 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h4><p>Redis 中的有序集合 zset 既可以保证内部元素的唯一性，又可以给每一个元素赋予一个排序权重 score 。</p><p>有序集合可以用于存储学生成绩，元素即学生 ID ，score 为其考试成绩，可以按成绩排序获取名次。</p><p>zset 的操作命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 向有序集合中插入元素</span><br><span class="line"><span class="meta">&gt;</span> zadd books 1 book1</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span> zadd books 3 book2</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">&gt;</span> zadd books 2 book3</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 按 score 排序列出指定名次范围的元素</span><br><span class="line"><span class="meta">&gt;</span> zrange books 0 1</span><br><span class="line">1) "book1"</span><br><span class="line">2) "book3"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 按 score 逆序列出指定名次范围的元素</span><br><span class="line"><span class="meta">&gt;</span> zrevrange books 0 1</span><br><span class="line">1) "book2"</span><br><span class="line">2) "book3"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取集合大小</span><br><span class="line"><span class="meta">&gt;</span> zcard books</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取指定 value 的 score</span><br><span class="line"><span class="meta">&gt;</span> zscore books book1</span><br><span class="line">"1"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 获取指定 value 的排名</span><br><span class="line"><span class="meta">&gt;</span> zrank books book1</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 按 score 区间遍历集合</span><br><span class="line"><span class="meta">&gt;</span> zrangebyscore books 0 2</span><br><span class="line">1) "book1"</span><br><span class="line">2) "book3"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除指定 value</span><br><span class="line"><span class="meta">&gt;</span> zrem books book3</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 包含 5 中基础数据结构，分别为字符串 string 、列表 list 、字典 hash 、集合 set 和有序集合 zset 。&lt;/p&gt;
&lt;p&gt;本篇文章简要介绍 Redis 的安装和这 5 种基础数据结构的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Redis" scheme="https://blog.ulyssesss.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之访问者模式</title>
    <link href="https://blog.ulyssesss.com/2019/08/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/08/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-13T04:03:57.000Z</published>
    <updated>2021-03-17T02:38:24.972Z</updated>
    
    <content type="html"><![CDATA[<p>访问者模式（Visitor Pattern），表示一个作用于某对象结构中的各元素的操作，可以在不改变各元素的类的前提下定义作用于这些元素的新操作，属于行为型模式。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>访问者模式由抽象访问者 Visitor、具体访问者 ConcreteVisitor 、抽象元素 Element 、具体元素 ConcreteElement 和对象结构 ObjectStructure 组成。</p><p>其中 Element 定义一个 accept 操作，以一个访问者为参数； ConcreteElement 为 Element 的具体实现，通过传入的访问者实现 accept 操作； ObjectStructure  能够枚举所包含的元素，并提供允许访问其元素的高层接口； Visitor 为 ObjectStructure 中元素的每一个类声明 visit 操作；ConcreteVisitor 实现 Visitor 中定义的操作，每个操作实现对应 ObjectStructure 中元素的一个类。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>将数据结构和作用于结构上的操作解耦，使增加和修改访问操作变得容易。</p><p>将一组元素类的访问行为集中到一个访问者对象中，而非分散到各个元素类中。 </p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>增加新的元素类很困难，每增加一个新的元素类，都需要在 Visitor 增加新的接口，并在每一个具体访问者类中增加相应的具体操作。</p><p>破坏元素的封装，需要暴露给访问者使用。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>一个对象结构中包含多个类型的对象，需要执行依赖其具体类型的操作，且数据结构相对稳定，而作用于结构上的操作需要频繁变动时，可以使用访问者模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循倾斜的开闭原则（修改访问行为遵循开闭原则，增加新元素破坏开闭原则）。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementA</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visitElementA(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementB</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visitElementB(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(ElementA elementA)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(ElementB elementB)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(ElementA elementA)</span> </span>&#123;</span><br><span class="line">        System.out.println(elementA.getClass().getSimpleName() + <span class="string">"被 visitElementA 访问"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(ElementB elementB)</span> </span>&#123;</span><br><span class="line">        System.out.println(elementB.getClass().getSimpleName() + <span class="string">"被 visitElementB 访问"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; elements = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        elements.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        elements.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        elements.forEach(element -&gt; element.accept(visitor));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectStructure objectStructure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line"></span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> ElementA());</span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> ElementB());</span><br><span class="line"></span><br><span class="line">        objectStructure.accept(<span class="keyword">new</span> ConcreteVisitor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;访问者模式（Visitor Pattern），表示一个作用于某对象结构中的各元素的操作，可以在不改变各元素的类的前提下定义作用于这些元素的新操作，属于行为型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之解释器模式</title>
    <link href="https://blog.ulyssesss.com/2019/08/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/08/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-09T07:05:26.000Z</published>
    <updated>2021-03-17T02:38:24.972Z</updated>
    
    <content type="html"><![CDATA[<p>解释器模式（Interpreter Pattern），定义语言的文法，并定义一个解释器来解释语言中的句子，属于行为型模式。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>解释器模式由上下文 Context 、抽象表达式 AbstractExpression 、终结符表达式 TerminalExpression 和非终结符表达式 NonterminalExpression 组成。</p><p>其中 Context 包含解释器之外的一些全局信息；AbstractExpression 声明一个抽象的解释操作；TerminalExpression 实现与文法中终结符相关的解释操作；NonterminalExpression 实现与文法中非终结符相关的解释操作。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>易于修改和扩展文法。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>复杂文法实现难度较大。</p><p>执行效率较低。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>发生频率较高的问题可以用简单的语言表达、文法较为简单时，可以使用解释器模式来解决该问题。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循单一职责原则、开闭原则。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DictionaryContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; dictionary = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        dictionary.put(<span class="string">"today"</span>, <span class="string">"今天"</span>);</span><br><span class="line">        dictionary.put(<span class="string">"is"</span>, <span class="string">"是"</span>);</span><br><span class="line">        dictionary.put(<span class="string">"a"</span>, <span class="string">"一个"</span>);</span><br><span class="line">        dictionary.put(<span class="string">"good"</span>, <span class="string">"好"</span>);</span><br><span class="line">        dictionary.put(<span class="string">"day"</span>, <span class="string">"日子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChinese</span><span class="params">(String englishWord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dictionary.get(englishWord);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">interpret</span><span class="params">(StringBuilder stringBuilder)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SymbolExpression</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interpret</span><span class="params">(StringBuilder stringBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"."</span>.equals(value)) &#123;</span><br><span class="line">            stringBuilder.append(<span class="string">"。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String word;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordExpression</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.word = word;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interpret</span><span class="params">(StringBuilder stringBuilder)</span> </span>&#123;</span><br><span class="line">        stringBuilder.append(DictionaryContext.getChinese(word.toLowerCase()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String sentence = <span class="string">"Today is a good day.Today is a good day.Today is a good day."</span>;</span><br><span class="line">        System.out.println(translate(sentence));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">translate</span><span class="params">(String sentence)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        List&lt;Expression&gt; expressions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] elements = sentence.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">for</span> (String element : elements) &#123;</span><br><span class="line">            String[] words = element.split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                expressions.add(<span class="keyword">new</span> WordExpression(word));</span><br><span class="line">            &#125;</span><br><span class="line">            expressions.add(<span class="keyword">new</span> SymbolExpression(<span class="string">"."</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Expression expression : expressions) &#123;</span><br><span class="line">            expression.interpret(stringBuilder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解释器模式（Interpreter Pattern），定义语言的文法，并定义一个解释器来解释语言中的句子，属于行为型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之中介者模式</title>
    <link href="https://blog.ulyssesss.com/2019/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-07T09:18:07.000Z</published>
    <updated>2021-03-17T02:38:24.967Z</updated>
    
    <content type="html"><![CDATA[<p>中介者模式（Mediator Pattern），用一个中介对象来封装一系列的对象交互，使各对象不需要显示地相互引用，从而使其耦合松散，且可以独立地改变它们之间的交互，属于行为型模式。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>中介者模式由抽象中介 Mediator 、抽象同事 Colleague 、具体中介 ConcreteMediator 和多个具体同事 ConcreteColleague 组成。</p><p>其中 Mediator 定义一个抽象的、将消息发给 Colleague 的方法；Colleague 持有一个 Mediator 的引用，定义抽象的发送、接收消息的方法；ConcreteMediator 实现 Mediator 中定义的发送消息方法，同时持有全部的 Mediator 引用；ConcreteColleague 继承 Colleague，通过持有的 Mediator 引用实现发送、接收消息的抽象方法。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>简化同事类 Colleague 的设计和实现。</p><p>简化同事类 Colleague 之间的交互，降低其间的解耦性。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>中介者类中包含全部同事类之间的交互细节，可能会导致其非常复杂、难以维护。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>系统中一组对象以定义良好却复杂的方式进行通信时，可以使用中介者模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循最小知识原则（迪米特法则），违反单一职责原则。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        String receiver = <span class="keyword">this</span>.getClass().getSimpleName();</span><br><span class="line">        System.out.println(receiver + <span class="string">" receive message: "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleagueA</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleagueA</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator.send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleagueB</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleagueB</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator.send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcreteColleagueA colleagueA;</span><br><span class="line">    <span class="keyword">private</span> ConcreteColleagueB colleagueB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleagueA</span><span class="params">(ConcreteColleagueA colleagueA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleagueA = colleagueA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleagueB</span><span class="params">(ConcreteColleagueB colleagueB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleagueB = colleagueB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colleagueA == colleague) &#123;</span><br><span class="line">            colleagueB.receive(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            colleagueA.receive(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">        ConcreteColleagueA colleagueA = <span class="keyword">new</span> ConcreteColleagueA(mediator);</span><br><span class="line">        ConcreteColleagueB colleagueB = <span class="keyword">new</span> ConcreteColleagueB(mediator);</span><br><span class="line"></span><br><span class="line">        mediator.setColleagueA(colleagueA);</span><br><span class="line">        mediator.setColleagueB(colleagueB);</span><br><span class="line"></span><br><span class="line">        colleagueA.send(<span class="string">"hello"</span>);</span><br><span class="line">        colleagueB.send(<span class="string">"hi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中介者模式（Mediator Pattern），用一个中介对象来封装一系列的对象交互，使各对象不需要显示地相互引用，从而使其耦合松散，且可以独立地改变它们之间的交互，属于行为型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之职责链模式</title>
    <link href="https://blog.ulyssesss.com/2019/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-06T10:07:36.000Z</published>
    <updated>2021-03-17T02:38:24.971Z</updated>
    
    <content type="html"><![CDATA[<p>职责链模式（Chain of Responsibility Pattern），使多个对象都有机会处理请求，从而避免请求的发送者和接收者之前的耦合关系。将这些接收者对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止，属于行为型模式。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>职责链模式由抽象处理类 Handler 和多个具体处理类 ConcreteHandler 组成。</p><p>其中 Handler 定义处理请求的接口；ConcreteHandler 实现处理请求的接口，处理请求或转发给其他 ConcreteHandler 。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>降低请求发送者和接收者间的耦合度。</p><p>可以灵活调整请求处理类的职责。</p><p>方便增加新的请求处理类。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>不能保证请求一定被处理。</p><p>使用不当可能会造成循环调用。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>请求需要多个接收者对象中的一个或几个协作处理时，可以使用职责链模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循单一职责原则、开闭原则和最小知识原则（迪米特法则）。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> request)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler successorHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessorHandler</span><span class="params">(Handler successorHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successorHandler = successorHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" : "</span> + request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            successorHandler.handle(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" : "</span> + request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteHandler1 handler1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line">        ConcreteHandler2 handler2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line"></span><br><span class="line">        handler1.setSuccessorHandler(handler2);</span><br><span class="line"></span><br><span class="line">        handler1.handle(<span class="number">50</span>);</span><br><span class="line">        handler1.handle(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;职责链模式（Chain of Responsibility Pattern），使多个对象都有机会处理请求，从而避免请求的发送者和接收者之前的耦合关系。将这些接收者对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止，属于行为型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之迭代器模式</title>
    <link href="https://blog.ulyssesss.com/2019/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-06T03:28:22.000Z</published>
    <updated>2021-03-17T02:38:24.972Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器模式（Iterator Pattern），提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示，属于行为型模式。</p><p>大部分高级语言本身就已经实现了迭代器模式，如 Java 中的 foreach 会被编译器处理为 Iterator。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>迭代器模式由抽象迭代类 Iterator 、具体迭代类 ConcreteIterator 、抽象聚合类 Aggregate 和具体聚合类 ConcreteAggregate 组成。</p><p>其中 Iterator 定义获取下一个对象、判断是否到尾部等接口；ConcreteIterator 为 Iterator 的具体实现；Aggregate 包含一个获取 Iterator 的接口；ConcreteAggregate 实现 Aggregate 接口，包含获取 Iterator 的具体逻辑。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>存储和遍历数据的职责分离，迭代器简化了聚合类。</p><p>支持以不同的方式遍历一个聚合对象。</p><p>方便增加新的聚合类和迭代器类，无须修改原有代码。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>存储和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，一定程度上增加了系统的复杂性。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>需要遍历聚合对象的内容而无须关注内部表示，需要为聚合对象提供多种遍历方式，或需要为不同聚合结构提供一个统一接口时，可以使用迭代器模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循单一职责原则、开闭原则和最小知识原则（迪米特法则）。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">createIterator</span><span class="params">(<span class="keyword">boolean</span> asc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIteratorAsc</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcreteAggregate&lt;T&gt; aggregate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIteratorAsc</span><span class="params">(ConcreteAggregate&lt;T&gt; aggregate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aggregate = aggregate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aggregate.get(currentIndex++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentIndex &lt; aggregate.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIteratorDesc</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcreteAggregate&lt;T&gt; aggregate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIteratorDesc</span><span class="params">(ConcreteAggregate&lt;T&gt; aggregate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aggregate = aggregate;</span><br><span class="line">        <span class="keyword">this</span>.currentIndex = aggregate.size() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aggregate.get(currentIndex--);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentIndex &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Aggregate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">createIterator</span><span class="params">(<span class="keyword">boolean</span> asc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> asc ? <span class="keyword">new</span> ConcreteIteratorAsc&lt;&gt;(<span class="keyword">this</span>) : <span class="keyword">new</span> ConcreteIteratorDesc&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        list.add(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        list.remove(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Aggregate&lt;Integer&gt; aggregate = <span class="keyword">new</span> ConcreteAggregate&lt;&gt;();</span><br><span class="line">        aggregate.add(<span class="number">1</span>);</span><br><span class="line">        aggregate.add(<span class="number">2</span>);</span><br><span class="line">        aggregate.add(<span class="number">3</span>);</span><br><span class="line">        aggregate.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Integer&gt; iterator1 = aggregate.createIterator(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Integer&gt; iterator2 = aggregate.createIterator(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator2.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迭代器模式（Iterator Pattern），提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示，属于行为型模式。&lt;/p&gt;
&lt;p&gt;大部分高级语言本身就已经实现了迭代器模式，如 Java 中的 foreach 会被编译器处理为 Iterator。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="https://blog.ulyssesss.com/2019/08/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/08/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-05T12:11:23.000Z</published>
    <updated>2021-03-17T02:38:24.970Z</updated>
    
    <content type="html"><![CDATA[<p>状态模式（State Pattern）：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类，属于行为型模式。</p><p>状态模式描述了对象状态的变化，以及对象如何在不同状态下表现出不同的行为。通过引入了一个抽象的状态类来表示状态，每一种具体状态类都继承此类，在不同的具体状态类中实现不同状态的行为，且包括状态之间的转换。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>状态模式由抽象状态 State 、具体状态 ConcreteState 和上下文 Context 组成。</p><p>其中 State 定义行为接口；ConcreteState 实现 State 中定义的接口，将不同状态下的行为单独提取出来进行封装；Context 持有 State ，行为随 State 的改变而改变。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>行为封装在状态中，修改对象状态即可改变对象的行为。</p><p>不同状态的行为被分割开，方便增加新的状态和行为。</p><p>状态对象封装了状态的转换规则，从而减少巨大的条件语句块。</p><p>多个上下文可以共享状态对象，减少系统中对象的个数。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>结构与实现都较为复杂，使用不当会导致程序结构和代码混乱。</p><p>会增加系统中类和对象的个数。</p><p>对开闭原则的支持不够好。（对于可以切换状态的状态模式，增加新的状态类需要修改状态转换逻辑，否则无法切换到新增状态；修改状态类的行为也需修改对应类的源代码。）</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>对象的行为随状态改变而改变、状态变化依靠大量的分支判断语句实现时，可以使用状态模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循单一职责原则、依赖倒置原则和开闭原则。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WORKING IN "</span> + context.getState().getClass().getSimpleName());</span><br><span class="line">        context.setState(<span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WORKING IN "</span> + context.getState().getClass().getSimpleName());</span><br><span class="line">        context.setState(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state.work(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">        context.request();</span><br><span class="line">        context.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;状态模式（State Pattern）：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类，属于行为型模式。&lt;/p&gt;
&lt;p&gt;状态模式描述了对象状态的变化，以及对象如何在不同状态下表现出不同的行为。通过引入了一个抽象的状态类来表示状态，每一种具体状态类都继承此类，在不同的具体状态类中实现不同状态的行为，且包括状态之间的转换。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式</title>
    <link href="https://blog.ulyssesss.com/2019/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-02T08:40:37.000Z</published>
    <updated>2021-03-17T02:38:24.972Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式（Observer Pattern），又叫发布-订阅模式（Publish/Subscribe Pattern），定义一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，主题对象的状态发生变化时，会通知所有的观察者对象，使它们能够更新自己，属于行为型模式。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>观察者模式由抽象主题 Subject、具体主题 ConcreteSubject、抽象观察者 Observer 和具体观察者 ConcreteObserver 组成。</p><p>其中 Subject 持有一组观察者，且提供可以增加和删除观察者的接口；ConcreteSubject 实现或继承 Subject ，包含被观察的状态，状态改变时通知所有登记过的观察者；Observer 定义一个接口，收到主题通知时更新自己；ConcreteObserver 实现 Observer ，在接到通知后使自身状态与主题状态相协调。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>定义了稳定的消息更新传递机制，支持广播通信。</p><p>在主题和观察者之间建立一个抽象的耦合，使得可以有不同的表示层作为具体观察者角色。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>主题有大量的观察者时，通知所有的观察者可能会耗时较长。</p><p>现实中很多情况下，不同的具体观察者没有实现同一个 Observer 。（可以通过事件委托解决）</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>一个对象改变将导致其他一个或多个对象也发生改变，且需要降低对象之间的耦合度时，可以使用观察者模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循最小知识原则（迪米特法则）、开闭原则。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers.forEach(Observer::update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String subjectStatus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubjectStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subjectStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubjectStatus</span><span class="params">(String subjectStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subjectStatus = subjectStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ConcreteSubject subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String observerStatus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(String name, ConcreteSubject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observerStatus = subject.getSubjectStatus();</span><br><span class="line">        System.out.println(name + <span class="string">" 状态随主题变化为 "</span> + observerStatus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        Observer observer1 = <span class="keyword">new</span> ConcreteObserver(<span class="string">"observer1"</span>, subject);</span><br><span class="line">        Observer observer2 = <span class="keyword">new</span> ConcreteObserver(<span class="string">"observer2"</span>, subject);</span><br><span class="line">        subject.attach(observer1);</span><br><span class="line">        subject.attach(observer2);</span><br><span class="line">        subject.setSubjectStatus(<span class="string">"[new status]"</span>);</span><br><span class="line">        subject.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观察者模式（Observer Pattern），又叫发布-订阅模式（Publish/Subscribe Pattern），定义一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，主题对象的状态发生变化时，会通知所有的观察者对象，使它们能够更新自己，属于行为型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之组合模式</title>
    <link href="https://blog.ulyssesss.com/2019/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/08/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-08-02T03:00:25.000Z</published>
    <updated>2021-03-17T02:38:24.971Z</updated>
    
    <content type="html"><![CDATA[<p>组合模式（Composite Pattern），将对象组合成树形结构以表示 <strong>部分-整体</strong> 的层次结构，使得用户对单个对象和组合对象的使用具有一致性，属于结构型模式。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>组合模式由抽象接口 Component 、 叶节点对象 Leaf 和枝节点对象 Composite 组成。</p><p>其中 Component 声明接口，也可以实现共有接口的默认行为；Leaf 实现 Component 接口，没有子节点；Composite 同样实现 Component 接口，且持有 Leaf 子节点。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>客户端可以一致地使用组合结构和单个对象，调用简单。</p><p>容易在组合体内加入新对象，客户端不必因为加入新对象而更修改代码。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>使设计更加抽象，对象的业务规则如果很复杂，实现组合模式具有很大挑战性，而且不是所有的方法都与叶子对象有关联。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>需要表示 <strong>部分-整体</strong> 的层次结构，且希望通过一种方式忽略整体与部分的差异、一致对待时，可以使用组合模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循依赖倒转原则、开闭原则，破坏接口隔离原则。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CompanyComponent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(CompanyComponent company)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(CompanyComponent company)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        System.out.println(prefix + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCompanyComposite</span> <span class="keyword">extends</span> <span class="title">CompanyComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;CompanyComponent&gt; companies = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCompanyComposite</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(CompanyComponent company)</span> </span>&#123;</span><br><span class="line">        companies.add(company);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(CompanyComponent company)</span> </span>&#123;</span><br><span class="line">        companies.remove(company);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.display(prefix);</span><br><span class="line">        companies.forEach(company -&gt; company.display(prefix + <span class="string">"-"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HRDepartmentLeaf</span> <span class="keyword">extends</span> <span class="title">CompanyComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HRDepartmentLeaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CompanyComponent root = <span class="keyword">new</span> ConcreteCompanyComposite(<span class="string">"北京总公司"</span>);</span><br><span class="line">        root.add(<span class="keyword">new</span> HRDepartmentLeaf(<span class="string">"总公司人力资源部"</span>));</span><br><span class="line"></span><br><span class="line">        CompanyComponent company1 = <span class="keyword">new</span> ConcreteCompanyComposite(<span class="string">"上海分公司"</span>);</span><br><span class="line">        company1.add(<span class="keyword">new</span> HRDepartmentLeaf(<span class="string">"上海分公司人力资源部"</span>));</span><br><span class="line">        root.add(company1);</span><br><span class="line"></span><br><span class="line">        CompanyComponent company2 = <span class="keyword">new</span> ConcreteCompanyComposite(<span class="string">"武汉分公司"</span>);</span><br><span class="line">        company2.add(<span class="keyword">new</span> HRDepartmentLeaf(<span class="string">"武汉分公司人力资源部"</span>));</span><br><span class="line">        root.add(company2);</span><br><span class="line"></span><br><span class="line">        root.display(<span class="string">"-"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组合模式（Composite Pattern），将对象组合成树形结构以表示 &lt;strong&gt;部分-整体&lt;/strong&gt; 的层次结构，使得用户对单个对象和组合对象的使用具有一致性，属于结构型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式</title>
    <link href="https://blog.ulyssesss.com/2019/07/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/07/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-07-30T08:57:14.000Z</published>
    <updated>2021-03-17T02:38:24.968Z</updated>
    
    <content type="html"><![CDATA[<p>享元模式（Flyweight Pattern），运用共享技术有效地支持大量细粒度的对象，属于结构型模式。</p><a id="more"></a><p>程序设计中有时需要生成大量细粒度的实例来表示数据，如果这些实例除了少部分参数外都相同，可以将这部分参数移到实例外，调用方法时再传入，通过共享大幅减少实例数。</p><p>对象内共享的部分称为内部状态，随环境而变化、不可共享的部分称为外部状态。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>享元模式由抽象享元类（或接口）AbstractFlyweight，具体享元类 ConcreteFlyweight 和享元工厂 FlyweightFactory 组成。</p><p>其中 AbstractFlyweight 接受并作用于外部状态；ConcreteFlyweight 继承或实现 AbstractFlyweight，维护内部状态；FlyweightFactory 用于创建和管理 Flyweight 对象。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>通过共享大幅度减少实例的数目。</p><p>外部状态相对独立，而且不会影响其内部状态，使得享元对象可以在不同的环境中被共享。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>使系统更加复杂，需要分离出内部状态和外部状态。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>系统中存在大量相同或者相似的对象，造成内存的大量耗费时可以使用享元模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>无。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Website</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(String user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteWebsite</span> <span class="keyword">extends</span> <span class="title">Website</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteWebsite</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"网站："</span> + name + <span class="string">" 用户："</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsiteFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Website&gt; websiteMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Website <span class="title">getWebsite</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Website website = websiteMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(website)) &#123;</span><br><span class="line">            <span class="keyword">return</span> website;</span><br><span class="line">        &#125;</span><br><span class="line">        Website newWebsite = <span class="keyword">new</span> ConcreteWebsite(name);</span><br><span class="line">        websiteMap.put(name, newWebsite);</span><br><span class="line">        <span class="keyword">return</span> newWebsite;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWebsiteCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> websiteMap.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WebsiteFactory websiteFactory = <span class="keyword">new</span> WebsiteFactory();</span><br><span class="line"></span><br><span class="line">        Website blog1 = websiteFactory.getWebsite(<span class="string">"blog"</span>);</span><br><span class="line">        blog1.use(<span class="string">"小A"</span>);</span><br><span class="line"></span><br><span class="line">        Website blog2 = websiteFactory.getWebsite(<span class="string">"blog"</span>);</span><br><span class="line">        blog2.use(<span class="string">"小B"</span>);</span><br><span class="line"></span><br><span class="line">        Website blog3 = websiteFactory.getWebsite(<span class="string">"blog"</span>);</span><br><span class="line">        blog3.use(<span class="string">"小C"</span>);</span><br><span class="line"></span><br><span class="line">        Website shopping1 = websiteFactory.getWebsite(<span class="string">"shopping"</span>);</span><br><span class="line">        shopping1.use(<span class="string">"小D"</span>);</span><br><span class="line"></span><br><span class="line">        Website shopping2 = websiteFactory.getWebsite(<span class="string">"shopping"</span>);</span><br><span class="line">        shopping2.use(<span class="string">"小E"</span>);</span><br><span class="line"></span><br><span class="line">        Website shopping3 = websiteFactory.getWebsite(<span class="string">"shopping"</span>);</span><br><span class="line">        shopping3.use(<span class="string">"小F"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"网站数量："</span> + websiteFactory.getWebsiteCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;享元模式（Flyweight Pattern），运用共享技术有效地支持大量细粒度的对象，属于结构型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之命令模式</title>
    <link href="https://blog.ulyssesss.com/2019/07/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/07/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-07-04T08:33:34.000Z</published>
    <updated>2021-03-17T02:38:24.968Z</updated>
    
    <content type="html"><![CDATA[<p>命令模式（Command Pattern）：将一个请求封装为一个对象，从而可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作，属于行为型模式。</p><p>命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>命令模式由抽象命令 AbstractCommand、具体命令 ConcreteCommand、调用者 Invoker 和接收者 Receiver 组成。</p><p>其中 AbstractCommand 用于声明执行操作的接口；ConcreteCommand 持有接收者对象，通过调用接收者来实现执行操作的接口；Invoker 触发命令的执行；Receiver 负责实际执行请求的相关操作。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>降低行为请求者和实现者间的耦合。</p><p>可以比较容易地设计一个命令队列。</p><p>方便将命令记入日志。</p><p>可与在接收请求时否决请求。</p><p>容易实现对请求的撤销和重做。</p><p>新的命令不影响其他类，可以很容易地加入到系统中。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>可能会导致系统中存在过多的具体命令类。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>需要将行为请求者和实现者解耦，或需要支持命令的排队、撤销、重做时可以使用命令模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循开闭原则、单一职责原则和最小知识原则（迪米特法则）。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"action"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Receiver receiver;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(receiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; commands = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        commands.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        commands.forEach(Command::execute);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line"></span><br><span class="line">        Command command1 = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">        invoker.addCommand(command1);</span><br><span class="line"></span><br><span class="line">        Command command2 = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">        invoker.addCommand(command2);</span><br><span class="line"></span><br><span class="line">        Command command3 = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">        invoker.addCommand(command3);</span><br><span class="line"></span><br><span class="line">        invoker.executeCommands();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命令模式（Command Pattern）：将一个请求封装为一个对象，从而可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作，属于行为型模式。&lt;/p&gt;
&lt;p&gt;命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之备忘录模式</title>
    <link href="https://blog.ulyssesss.com/2019/07/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/07/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-07-03T12:51:34.000Z</published>
    <updated>2021-03-17T02:38:24.969Z</updated>
    
    <content type="html"><![CDATA[<p>备忘录模式（Memento Pattern）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以后可以将该对象恢复到原先保存的状态，属于行为型模式。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>备忘录模式由发起人 Originator、备忘录 Memento 和管理者 Caretaker 组成。</p><p>其中 Originator 是持有状态的对象，可以创建备忘录 Memento 来记录状态，并可以使用备忘录恢复到之前的状态；Memento 负责存储 Originator 的内部状态；Caretaker 负责保存备忘录 Memento。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>提供了一种状态恢复的实现机制。</p><p>实现了信息的封装，备忘录来保存发起人的状态，使发起人复杂的内部信息对其他对象透明。</p><p>简化了发起人 Originator，不需要自己管理和保存内部状态的多个版本。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>会占用更多的资源，尤其在状态数据较大的情况下。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>需要提供状态恢复机制时，可以使用备忘录模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循最小知识原则（迪米特法则）和开闭原则。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoveryByMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = memento.getStatus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"status = "</span> + status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        originator.setStatus(<span class="string">"good"</span>);</span><br><span class="line">        originator.show();</span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        caretaker.setMemento(originator.createMemento());</span><br><span class="line">        originator.setStatus(<span class="string">"bad"</span>);</span><br><span class="line">        originator.show();</span><br><span class="line">        originator.recoveryByMemento(caretaker.getMemento());</span><br><span class="line">        originator.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;备忘录模式（Memento Pattern）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以后可以将该对象恢复到原先保存的状态，属于行为型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法模式</title>
    <link href="https://blog.ulyssesss.com/2019/07/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/07/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-07-01T17:20:22.000Z</published>
    <updated>2021-03-17T02:38:24.970Z</updated>
    
    <content type="html"><![CDATA[<p>模板方法模式（Template Method Pattern）：定义一个操作中算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变算法的结构而重新定义某些特定步骤，属于行为型模式。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>模板方法模式由抽象类 AbstractClass 和实现类 ConcreteClass 组成。</p><p>其中 AbstractClass 给出一个顶级逻辑的骨架，逻辑的组成步骤在相应的抽象操作中，推迟到子类实现；ConcreteClass 实现父类定义的一个或多个抽象方法，从而使得顶级逻辑的实现各不相同。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>将不变的行为放在父类，去除了子类中的重复代码。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>算法骨架改变时需要修改抽象类。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>当系统中算法的骨架固定，而实现可能有很多种时，可以使用模板方法模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循复用原则，违反里氏替换原则（子类影响到了父类）。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTestPaper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">questionA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 + 1 = ?"</span>);</span><br><span class="line">        System.out.println(answerA());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">questionB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 - 1 = ?"</span>);</span><br><span class="line">        System.out.println(answerB());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">answerA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">answerB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTestPater</span> <span class="keyword">extends</span> <span class="title">AbstractTestPaper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">answerA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">answerB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractTestPaper testPaper = <span class="keyword">new</span> ConcreteTestPater();</span><br><span class="line">        testPaper.questionA();</span><br><span class="line">        testPaper.questionB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模板方法模式（Template Method Pattern）：定义一个操作中算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变算法的结构而重新定义某些特定步骤，属于行为型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥接模式</title>
    <link href="https://blog.ulyssesss.com/2019/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.ulyssesss.com/2019/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-06-13T03:55:31.000Z</published>
    <updated>2021-03-17T02:38:24.970Z</updated>
    
    <content type="html"><![CDATA[<p>桥接模式（Bridge），将抽象部分与它的实现部分分离，使它们都可以独立的变化，属于结构型模式。</p><p>桥接模式中，实现的系统有多个角度的分类，每种分类都有可能变化，将继承关系转换为关联关系，让各种变化分离出来，使它们独立变化，减少各种变化之间的耦合。</p><a id="more"></a><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>桥接模式由实现类接口 Implementor、具体实现类 ConcreteImplementor、抽象类 Abstraction 和扩充抽象类 RefinedAbstraction 组成。</p><p>其中实现类接口定义一种变化，具体实现类为其变化的具体实现；而抽象类为持有实现类接口引用的抽象，扩充抽象类继承抽象类，通过持有实现类接口来应对变化。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>抽象接口及其实现部分分离。 </p><p>实现细节对客户端透明。</p><p>提高了系统的可扩充性，在多个变化维度中任意扩展一个维度，不需要修改原有系统。 </p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>增加系统的理解与设计难度，需要针对抽象进行设计与编码。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>当一个对象有多个维度的变化，需要将各种变化分离出来，使其独立变化时，可以使用桥接模式。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>遵循单一职责原则、最小知识原则（迪米特法则）、开闭原则，和复用原则。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImplementorColor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorRedColor</span> <span class="keyword">implements</span> <span class="title">ImplementorColor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorGreenColor</span> <span class="keyword">implements</span> <span class="title">ImplementorColor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"green"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractionShape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> ImplementorColor implementorColor;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractionShape</span><span class="params">(ImplementorColor implementorColor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.implementorColor = implementorColor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstractionCircle</span> <span class="keyword">extends</span> <span class="title">AbstractionShape</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefinedAbstractionCircle</span><span class="params">(ImplementorColor implementorColor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(implementorColor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        implementorColor.draw();</span><br><span class="line">        System.out.println(<span class="string">"circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ImplementorColor redColor = <span class="keyword">new</span> ConcreteImplementorRedColor();</span><br><span class="line">        ImplementorColor greenColor = <span class="keyword">new</span> ConcreteImplementorGreenColor();</span><br><span class="line">        RefinedAbstractionCircle redCircle = <span class="keyword">new</span> RefinedAbstractionCircle(redColor);</span><br><span class="line">        RefinedAbstractionCircle greenCircle = <span class="keyword">new</span> RefinedAbstractionCircle(greenColor);</span><br><span class="line">        redCircle.draw();</span><br><span class="line">        greenCircle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;桥接模式（Bridge），将抽象部分与它的实现部分分离，使它们都可以独立的变化，属于结构型模式。&lt;/p&gt;
&lt;p&gt;桥接模式中，实现的系统有多个角度的分类，每种分类都有可能变化，将继承关系转换为关联关系，让各种变化分离出来，使它们独立变化，减少各种变化之间的耦合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.ulyssesss.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://blog.ulyssesss.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
